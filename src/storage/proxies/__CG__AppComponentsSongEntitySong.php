<?php

namespace DoctrineProxies\__CG__\App\Components\Song\Entity;


/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Song extends \App\Components\Song\Entity\Song implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'id', 'title', 'author', 'album', 'label', 'year', 'source', 'tempo', 'playedAt', 'finishedAt', 'playedCount', 'isActive', 'volume', 'unsplashSearchQuery', 'songAttachmentData', 'songAttachment', 'createdAt', 'updatedAt'];
        }

        return ['__isInitialized__', 'id', 'title', 'author', 'album', 'label', 'year', 'source', 'tempo', 'playedAt', 'finishedAt', 'playedCount', 'isActive', 'volume', 'unsplashSearchQuery', 'songAttachmentData', 'songAttachment', 'createdAt', 'updatedAt'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Song $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load(): void
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized(): bool
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized): void
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null): void
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer(): ?\Closure
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null): void
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner(): ?\Closure
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties(): array
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId(): ?int
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getTitle(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTitle', []);

        return parent::getTitle();
    }

    /**
     * {@inheritDoc}
     */
    public function setTitle(string $title): \App\Components\Song\Entity\Song
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTitle', [$title]);

        return parent::setTitle($title);
    }

    /**
     * {@inheritDoc}
     */
    public function getAuthor(): \App\Components\Author\Entity\Author
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAuthor', []);

        return parent::getAuthor();
    }

    /**
     * {@inheritDoc}
     */
    public function setAuthor(\App\Components\Author\Entity\Author $author): \App\Components\Song\Entity\Song
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAuthor', [$author]);

        return parent::setAuthor($author);
    }

    /**
     * {@inheritDoc}
     */
    public function getAlbum(): ?\App\Components\Album\Entity\Album
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAlbum', []);

        return parent::getAlbum();
    }

    /**
     * {@inheritDoc}
     */
    public function setAlbum(?\App\Components\Album\Entity\Album $album): \App\Components\Song\Entity\Song
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAlbum', [$album]);

        return parent::setAlbum($album);
    }

    /**
     * {@inheritDoc}
     */
    public function getLabel(): ?\App\Components\Label\Entity\Label
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLabel', []);

        return parent::getLabel();
    }

    /**
     * {@inheritDoc}
     */
    public function setLabel(?\App\Components\Label\Entity\Label $label): \App\Components\Song\Entity\Song
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLabel', [$label]);

        return parent::setLabel($label);
    }

    /**
     * {@inheritDoc}
     */
    public function getYear(): int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getYear', []);

        return parent::getYear();
    }

    /**
     * {@inheritDoc}
     */
    public function setYear(int $year): \App\Components\Song\Entity\Song
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setYear', [$year]);

        return parent::setYear($year);
    }

    /**
     * {@inheritDoc}
     */
    public function getSource(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSource', []);

        return parent::getSource();
    }

    /**
     * {@inheritDoc}
     */
    public function setSource(string $source): \App\Components\Song\Entity\Song
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSource', [$source]);

        return parent::setSource($source);
    }

    /**
     * {@inheritDoc}
     */
    public function getTempo(): int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTempo', []);

        return parent::getTempo();
    }

    /**
     * {@inheritDoc}
     */
    public function setTempo(int $tempo): \App\Components\Song\Entity\Song
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTempo', [$tempo]);

        return parent::setTempo($tempo);
    }

    /**
     * {@inheritDoc}
     */
    public function getPlayedAt(): ?\DateTimeImmutable
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPlayedAt', []);

        return parent::getPlayedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setPlayedAt(?\DateTimeImmutable $playedAt): \App\Components\Song\Entity\Song
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPlayedAt', [$playedAt]);

        return parent::setPlayedAt($playedAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getFinishedAt(): ?\DateTimeImmutable
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFinishedAt', []);

        return parent::getFinishedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setFinishedAt(?\DateTimeImmutable $finishedAt): \App\Components\Song\Entity\Song
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFinishedAt', [$finishedAt]);

        return parent::setFinishedAt($finishedAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getPlayedCount(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPlayedCount', []);

        return parent::getPlayedCount();
    }

    /**
     * {@inheritDoc}
     */
    public function setPlayedCount(string $playedCount): \App\Components\Song\Entity\Song
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPlayedCount', [$playedCount]);

        return parent::setPlayedCount($playedCount);
    }

    /**
     * {@inheritDoc}
     */
    public function getIsActive(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsActive', []);

        return parent::getIsActive();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsActive(bool $isActive): \App\Components\Song\Entity\Song
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsActive', [$isActive]);

        return parent::setIsActive($isActive);
    }

    /**
     * {@inheritDoc}
     */
    public function getVolume(): int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getVolume', []);

        return parent::getVolume();
    }

    /**
     * {@inheritDoc}
     */
    public function setVolume(int $volume): \App\Components\Song\Entity\Song
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setVolume', [$volume]);

        return parent::setVolume($volume);
    }

    /**
     * {@inheritDoc}
     */
    public function getUnsplashSearchQuery(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUnsplashSearchQuery', []);

        return parent::getUnsplashSearchQuery();
    }

    /**
     * {@inheritDoc}
     */
    public function setUnsplashSearchQuery(?string $unsplashSearchQuery): \App\Components\Song\Entity\Song
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUnsplashSearchQuery', [$unsplashSearchQuery]);

        return parent::setUnsplashSearchQuery($unsplashSearchQuery);
    }

    /**
     * {@inheritDoc}
     */
    public function getSongAttachmentData(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSongAttachmentData', []);

        return parent::getSongAttachmentData();
    }

    /**
     * {@inheritDoc}
     */
    public function setSongAttachmentData(?string $songAttachmentData): \App\Components\Song\Entity\Song
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSongAttachmentData', [$songAttachmentData]);

        return parent::setSongAttachmentData($songAttachmentData);
    }

    /**
     * {@inheritDoc}
     */
    public function getSongAttachment(): ?\App\Components\Attachment\Entity\Attachment
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSongAttachment', []);

        return parent::getSongAttachment();
    }

    /**
     * {@inheritDoc}
     */
    public function setSongAttachment(?\App\Components\Attachment\Entity\Attachment $songAttachment): \App\Components\Song\Entity\Song
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSongAttachment', [$songAttachment]);

        return parent::setSongAttachment($songAttachment);
    }

    /**
     * {@inheritDoc}
     */
    public function offsetExists($offset)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'offsetExists', [$offset]);

        return parent::offsetExists($offset);
    }

    /**
     * {@inheritDoc}
     */
    public function offsetSet($offset, $value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'offsetSet', [$offset, $value]);

        return parent::offsetSet($offset, $value);
    }

    /**
     * {@inheritDoc}
     */
    public function offsetGet($offset)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'offsetGet', [$offset]);

        return parent::offsetGet($offset);
    }

    /**
     * {@inheritDoc}
     */
    public function offsetUnset($offset)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'offsetUnset', [$offset]);

        return parent::offsetUnset($offset);
    }

    /**
     * {@inheritDoc}
     */
    public function getContent(string $field)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getContent', [$field]);

        return parent::getContent($field);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedAt(): ?\DateTimeImmutable
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedAt', []);

        return parent::getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedAt(?\DateTimeImmutable $createdAt): \App\Components\Song\Entity\Song
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedAt', [$createdAt]);

        return parent::setCreatedAt($createdAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdatedAt(): ?\DateTimeImmutable
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedAt', []);

        return parent::getUpdatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdatedAt(?\DateTimeImmutable $updatedAt): \App\Components\Song\Entity\Song
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdatedAt', [$updatedAt]);

        return parent::setUpdatedAt($updatedAt);
    }

}
